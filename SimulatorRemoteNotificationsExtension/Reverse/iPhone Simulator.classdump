//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _PurpleEventMessage {
    CDStruct_c91b0553 _field1;
    struct {
        int _field1;
        int _field2;
        CDStruct_b2fbf00d _field3;
        CDStruct_b2fbf00d _field4;
        unsigned int _field5;
        unsigned long long _field6;
        unsigned int _field7;
        int _field8;
        int _field9;
        unsigned int _field10;
        unsigned char _field11[0];
    } _field2;
};

struct purpleMessage {
    CDStruct_c91b0553 _field1;
    struct {
        unsigned int _field1;
    } _field2;
    union {
        struct {
            CDStruct_1ede1e67 _field1;
            int _field2;
            int _field3;
            int _field4;
            int _field5;
            int _field6;
            int _field7;
        } _field1;
        struct {
            unsigned char _field1[12];
            int _field2;
            int _field3;
            int _field4;
            int _field5;
        } _field2;
        struct {
            union {
                CDStruct_1ede1e67 _field1;
                CDStruct_72af3c3a _field2;
                CDStruct_72af3c3a _field3;
                struct {
                    unsigned int _field1;
                    unsigned int _field2;
                    unsigned int :24;
                    unsigned int :8;
                } _field4;
            } _field1;
        } _field3;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
} CDStruct_c91b0553;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int :16;
    unsigned int :8;
    unsigned int :8;
} CDStruct_1ede1e67;

typedef struct {
    void *_field1;
    unsigned int :8;
    unsigned int :8;
    unsigned int :8;
    unsigned int :8;
    unsigned int _field2;
} CDStruct_72af3c3a;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    CDStruct_c91b0553 _field1;
    unsigned int _field2;
    unsigned char _field3;
    struct {
        unsigned int _field1;
        unsigned long long _field2;
        unsigned int _field3;
        union {
            struct {
                unsigned int _field1;
                unsigned int _field2;
                unsigned int _field3;
                double _field4;
                double _field5;
                double _field6;
                double _field7;
                double _field8;
                unsigned int _field9;
                unsigned int _field10;
                unsigned int _field11;
            } _field1;
            struct {
                unsigned int _field1;
                double _field2;
                double _field3;
                double _field4;
                unsigned int _field5;
            } _field2;
            struct {
                unsigned int _field1;
                unsigned int _field2;
                unsigned int _field3;
                unsigned int _field4;
                unsigned int _field5;
                unsigned int _field6;
            } _field3;
            struct {
                double _field1;
                double _field2;
                double _field3;
            } _field4;
        } _field4;
    } _field4[0];
} CDStruct_fd7200cf;

#pragma mark -

//
// File: /Applications/Xcode-5.0.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Applications/iPhone Simulator.app/Contents/MacOS/iPhone Simulator
// UUID: 8F952DF1-21F1-39C7-90D0-845883E20740
//
//                           Arch: x86_64
//                 Source version: 463.9.4.0.0
//       Minimum Mac OS X version: 10.8.0
//                    SDK version: 10.8.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../../Library/PrivateFrameworks
//                               = /Applications/Xcode-5.0.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/PrivateFrameworks
//

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSObject
- (NSString *)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (NSString *)debugDescription;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

__attribute__((visibility("hidden")))
@interface DeviceMenuItemInfo : NSObject
{
    ISHDeviceInfo *_device;
    ISHSDKInfo *_sdk;
}

@property(retain) ISHSDKInfo *sdk; // @synthesize sdk=_sdk;
@property(retain) ISHDeviceInfo *device; // @synthesize device=_device;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface GuiController : NSObject <NSControlTextEditingDelegate, NSWindowDelegate>
{
    BOOL _inRotation;
    BOOL _wasHidpi;
    BOOL _deviceWindowIsBeingCreated;
    BOOL _haveLoadedWindowOnce;
    BOOL _simulatingHardwareKeyboard;
    BOOL _treatHomeButtonAsDown;
    BOOL _enableMirrorScreens;
    BOOL _mirrorOnly;
    BOOL _mirrorScreenConnected;
    BOOL _mirrorScreenEvents;
    BOOL _deviceWindowShowChrome;
    float _rotation;
    int _mirrorRotation;
    float _deviceWindowScale;
    int _deviceWindowType;
    PreferencesController *_preferencesController;
    NSMenuItem *_devicesMenuItem;
    NSMenuItem *_extrasMenuItem;
    NSMenuItem *_tvExtrasMenuItem;
    NSWindow *_customLocationWindow;
    NSTextField *_customLocationLatitudeField;
    NSTextField *_customLocationLongitudeField;
    NSButton *_customLocationOKButton;
    IndigoSessionController *_indigoSessionController;
    long long _selectedLocationTag;
    SimulatorViewController *_simulatorViewController;
    NSScreen *_lastScreen;
    NSWindow *_soundingWindow;
    DeviceWindow *_deviceWindow;
    SimulatorChromeView *_simulatorBox;
    SimulatorView *_simulatorView;
    SimulatorHomeView *_homeView;
    SimulatorGlassView *_glassView;
    SimulatorGlassWindow *_glassWindow;
    long long _tvOutMode;
    NSWindow *_tvOutWindow;
    SimulatorViewController *_tvOutSimulatorViewController;
    SimulatorView *_tvOutSimulatorView;
    NSAppleScript *_showProgrammingGuideScript;
    NSWindow *_mirrorWindow;
    SimulatorView *_mirrorView;
    struct __MTDevice *_mirrorDeviceRef;
    NSScrollView *_deviceWindowScrollView;
    NSBundle *_deviceBundle;
    id _deviceBundleObject;
    NSObject<OS_dispatch_queue> *_eventQueue;
    struct CGPoint _startingSimulatorViewInset;
    struct CGSize _recommendedWindowSize;
    struct CGAffineTransform _transform;
    struct CGAffineTransform _mirrorTransform;
}

+ (void)setStartingURL:(char *)arg1;
+ (id)sharedInstance;
@property NSObject<OS_dispatch_queue> *eventQueue; // @synthesize eventQueue=_eventQueue;
@property(retain) id deviceBundleObject; // @synthesize deviceBundleObject=_deviceBundleObject;
@property(retain) NSBundle *deviceBundle; // @synthesize deviceBundle=_deviceBundle;
@property(retain) NSScrollView *deviceWindowScrollView; // @synthesize deviceWindowScrollView=_deviceWindowScrollView;
@property BOOL deviceWindowShowChrome; // @synthesize deviceWindowShowChrome=_deviceWindowShowChrome;
@property int deviceWindowType; // @synthesize deviceWindowType=_deviceWindowType;
@property(nonatomic) float deviceWindowScale; // @synthesize deviceWindowScale=_deviceWindowScale;
@property struct CGSize recommendedWindowSize; // @synthesize recommendedWindowSize=_recommendedWindowSize;
@property struct __MTDevice *mirrorDeviceRef; // @synthesize mirrorDeviceRef=_mirrorDeviceRef;
@property int mirrorRotation; // @synthesize mirrorRotation=_mirrorRotation;
@property struct CGAffineTransform mirrorTransform; // @synthesize mirrorTransform=_mirrorTransform;
@property(retain) SimulatorView *mirrorView; // @synthesize mirrorView=_mirrorView;
@property(retain) NSWindow *mirrorWindow; // @synthesize mirrorWindow=_mirrorWindow;
@property BOOL mirrorScreenEvents; // @synthesize mirrorScreenEvents=_mirrorScreenEvents;
@property BOOL mirrorScreenConnected; // @synthesize mirrorScreenConnected=_mirrorScreenConnected;
@property BOOL mirrorOnly; // @synthesize mirrorOnly=_mirrorOnly;
@property BOOL enableMirrorScreens; // @synthesize enableMirrorScreens=_enableMirrorScreens;
@property BOOL treatHomeButtonAsDown; // @synthesize treatHomeButtonAsDown=_treatHomeButtonAsDown;
@property BOOL simulatingHardwareKeyboard; // @synthesize simulatingHardwareKeyboard=_simulatingHardwareKeyboard;
@property struct CGPoint startingSimulatorViewInset; // @synthesize startingSimulatorViewInset=_startingSimulatorViewInset;
@property(retain) NSAppleScript *showProgrammingGuideScript; // @synthesize showProgrammingGuideScript=_showProgrammingGuideScript;
@property BOOL haveLoadedWindowOnce; // @synthesize haveLoadedWindowOnce=_haveLoadedWindowOnce;
@property BOOL deviceWindowIsBeingCreated; // @synthesize deviceWindowIsBeingCreated=_deviceWindowIsBeingCreated;
@property BOOL wasHidpi; // @synthesize wasHidpi=_wasHidpi;
@property BOOL inRotation; // @synthesize inRotation=_inRotation;
@property struct CGAffineTransform transform; // @synthesize transform=_transform;
@property(nonatomic) float rotation; // @synthesize rotation=_rotation;
@property(retain) SimulatorView *tvOutSimulatorView; // @synthesize tvOutSimulatorView=_tvOutSimulatorView;
@property(retain) SimulatorViewController *tvOutSimulatorViewController; // @synthesize tvOutSimulatorViewController=_tvOutSimulatorViewController;
@property(retain) NSWindow *tvOutWindow; // @synthesize tvOutWindow=_tvOutWindow;
@property long long tvOutMode; // @synthesize tvOutMode=_tvOutMode;
@property(retain) SimulatorGlassWindow *glassWindow; // @synthesize glassWindow=_glassWindow;
@property(retain) SimulatorGlassView *glassView; // @synthesize glassView=_glassView;
@property(retain) SimulatorHomeView *homeView; // @synthesize homeView=_homeView;
@property(retain) SimulatorView *simulatorView; // @synthesize simulatorView=_simulatorView;
@property(retain) SimulatorChromeView *simulatorBox; // @synthesize simulatorBox=_simulatorBox;
@property(retain) DeviceWindow *deviceWindow; // @synthesize deviceWindow=_deviceWindow;
@property(retain) NSWindow *soundingWindow; // @synthesize soundingWindow=_soundingWindow;
@property(retain) NSScreen *lastScreen; // @synthesize lastScreen=_lastScreen;
@property(retain) SimulatorViewController *simulatorViewController; // @synthesize simulatorViewController=_simulatorViewController;
@property long long selectedLocationTag; // @synthesize selectedLocationTag=_selectedLocationTag;
@property(retain) IndigoSessionController *indigoSessionController; // @synthesize indigoSessionController=_indigoSessionController;
@property NSButton *customLocationOKButton; // @synthesize customLocationOKButton=_customLocationOKButton;
@property NSTextField *customLocationLongitudeField; // @synthesize customLocationLongitudeField=_customLocationLongitudeField;
@property NSTextField *customLocationLatitudeField; // @synthesize customLocationLatitudeField=_customLocationLatitudeField;
@property NSWindow *customLocationWindow; // @synthesize customLocationWindow=_customLocationWindow;
@property NSMenuItem *tvExtrasMenuItem; // @synthesize tvExtrasMenuItem=_tvExtrasMenuItem;
@property NSMenuItem *extrasMenuItem; // @synthesize extrasMenuItem=_extrasMenuItem;
@property NSMenuItem *devicesMenuItem; // @synthesize devicesMenuItem=_devicesMenuItem;
@property PreferencesController *preferencesController; // @synthesize preferencesController=_preferencesController;
- (struct CGPoint)homeOriginForCurrentDeviceDoubled:(BOOL)arg1;
- (id)homeImageForCurrentDeviceDoubled:(BOOL)arg1;
- (id)chromeImageForCurrentDeviceDoubled:(BOOL)arg1;
- (id)currentSDK;
- (id)currentDeviceInfo;
- (unsigned int)CADebugFlagForMenuItemTag:(long long)arg1;
- (void)sendButtonEvent:(int)arg1;
- (void)rotationTimeout;
- (void)toggleRotationToOrientation:(int)arg1;
- (float)radiansFromOrientation:(int)arg1;
- (int)orientationFromRadians:(float)arg1;
- (BOOL)orientationIsPortraitish;
- (void)updateCustomLocationMode;
- (void)populateLocationMenu;
- (void)populateDeviceMenu;
- (void)updateDeviceBundle;
- (void)updateMirrorScreens;
- (void)updateScreenInfo:(id)arg1;
- (void)updateGlassWindow;
- (void)setupGlassWindow;
- (void)setupTvOutWindow;
- (struct CGSize)sizeForScreen:(unsigned int)arg1;
- (void)resetTvOutWindow;
- (void)updateDeviceWindowLevel;
- (void)updateScaledSimulatorFrame;
- (struct CGSize)simulatorViewFrameDifference;
- (struct CGRect)scrollDocumentFrame;
- (struct CGSize)simulatorViewSize;
- (void)updateWindowTitle;
- (void)windowDidMove:(id)arg1;
- (void)setupDeviceWindow;
- (void)setupWindows;
- (void)loadWindowCenter;
- (void)saveWindowCenter;
- (struct CGPoint)lastWindowCenter;
- (void)cleanupWindows:(BOOL)arg1;
- (BOOL)newWindowRequiredForRotation;
- (void)sendIndigoHIDData:(CDStruct_fd7200cf *)arg1;
- (void)sendPurpleEvent:(struct _PurpleEventMessage *)arg1;
- (void)sendOpenURLEvent:(id)arg1;
- (void)sendPreferencesChangedEvent;
- (void)windowScaleChanged:(id)arg1;
- (void)openSyslog:(id)arg1;
- (void)showMotionControl:(id)arg1;
- (void)windowChromeOverrideChanged:(id)arg1;
- (void)recreateWindow;
- (void)windowStayInFrontChanged:(id)arg1;
- (void)showProgrammingGuide:(id)arg1;
- (id)pathToXcode;
- (void)customLocationCancel:(id)arg1;
- (void)customLocationOK:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)triggerCloudSync:(id)arg1;
- (void)customLocationChanged:(id)arg1;
- (void)toggleCADebugFlag:(id)arg1;
- (void)toggleSlowMotion:(id)arg1;
- (void)toggleKeyboardSync:(id)arg1;
- (void)toggleHardwareKeyboard:(id)arg1;
- (void)toggleInCallStatusBar:(id)arg1;
- (void)simulateMemoryWarning:(id)arg1;
- (void)toggleRingerSwitch:(id)arg1;
- (void)shakeDevice:(id)arg1;
- (void)lockButtonPressed:(id)arg1;
- (void)homeButtonPressHold:(id)arg1;
- (void)homeButtonPressed:(id)arg1;
- (void)homeButtonUp:(id)arg1;
- (void)homeButtonDown:(id)arg1;
- (void)tvOutModeChanged:(id)arg1;
- (void)tvOutModeChangedTo:(int)arg1;
- (void)resetTvOutSimulatorViewController;
- (void)simulateDevice:(id)arg1;
- (void)updateWindow;
- (void)menuExtraChanged:(id)arg1;
- (void)animateToRotation:(id)arg1;
- (void)toggleRotationRight:(id)arg1;
- (void)toggleRotationLeft:(id)arg1;
- (void)copyScreen:(id)arg1;
- (void)pasteText:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (void)saveScreenShot:(id)arg1;
- (void)openPrinterSimulator:(id)arg1;
- (int)orientation;
- (void)setNonFullsizeRotation;
- (void)revalidateDevicesMenu;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)monitorScaleMatches:(double)arg1;
- (void)resetContentSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)resetContent:(id)arg1;
- (void)dealloc;
- (void)tvOutClear;
- (void)application:(id)arg1 openFiles:(id)arg2;
- (unsigned long long)applicationShouldTerminate:(id)arg1;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (void)establishConnection:(id)arg1;
- (void)awakeFromNib;
- (void)simulatorFatalErrorSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)springBoardDidExit;
- (void)springBoardDidLaunch;
- (void)springBoardWillLaunch;
- (void)simulatorViewNeedsDisplayOnMainThread:(id)arg1;
- (struct CGRect)tvOutWindowFrame;
- (struct CGRect)tvOutContentFrame;
- (struct CGSize)frameSize;
- (struct CGSize)frameSizeWithChrome:(BOOL)arg1 scaledForMonitor:(BOOL)arg2;
- (struct CGPoint)homeOrigin;
- (id)homeImage;
- (id)chromeImage;
- (float)deviceWindowAdditionalDpiScale;
- (double)displayScale;
- (BOOL)hidpiDrawing;
- (BOOL)doubledFrame;
- (BOOL)hidpiMacMonitor;
- (void)fixupGlassWindow;
- (void)fitDeviceWindow;
- (id)deviceWindowScreen;
- (int)desiredDeviceWindowType:(int)arg1;
- (double)scrollerSize;
- (void)openURLInMobileSafari:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SimulatorViewController : NSObject
{
    BOOL _glInitialized;
    unsigned int _shmemPort;
    unsigned int _imageTexture;
    long long _framebufferType;
    FramebufferConnection *_framebufferConnection;
    GuiController *_guiController;
    void *_data;
    void *_lastData;
    unsigned long long _dataRowbytes;
    unsigned long long _dataWidth;
    unsigned long long _dataHeight;
    NSOpenGLView *_pairedView;
    NSLock *_imageDataLock;
}

@property BOOL glInitialized; // @synthesize glInitialized=_glInitialized;
@property unsigned int imageTexture; // @synthesize imageTexture=_imageTexture;
@property(retain) NSLock *imageDataLock; // @synthesize imageDataLock=_imageDataLock;
@property unsigned int shmemPort; // @synthesize shmemPort=_shmemPort;
@property(retain) NSOpenGLView *pairedView; // @synthesize pairedView=_pairedView;
@property unsigned long long dataHeight; // @synthesize dataHeight=_dataHeight;
@property unsigned long long dataWidth; // @synthesize dataWidth=_dataWidth;
@property unsigned long long dataRowbytes; // @synthesize dataRowbytes=_dataRowbytes;
@property void *lastData; // @synthesize lastData=_lastData;
@property void *data; // @synthesize data=_data;
@property GuiController *guiController; // @synthesize guiController=_guiController;
@property(retain) FramebufferConnection *framebufferConnection; // @synthesize framebufferConnection=_framebufferConnection;
@property long long framebufferType; // @synthesize framebufferType=_framebufferType;
- (void)blitImageToView:(id)arg1;
- (void)initGLDrawing:(id)arg1;
- (id)pngImageRep;
- (id)bitmapImageRep;
- (struct CGImage *)newCGImageForCurrentOrientation;
- (struct CGImage *)newCGImage;
- (_Bool)getShmemPort:(unsigned int *)arg1 size:(unsigned long long *)arg2 rowbytes:(unsigned long long *)arg3 bounds:(struct CGRect *)arg4;
- (void)backingChanged:(struct CGRect)arg1 depth:(unsigned int)arg2 data:(void **)arg3 rowBytes:(int *)arg4;
- (void)shapeChanged:(struct CGRect)arg1;
- (void)clearLastFrame;
- (void)dealloc;
- (void)disconnect;
- (id)initWithController:(id)arg1 framebufferType:(long long)arg2;
- (id)initWithController:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)_initializeAccessibility;
- (void)_handleAccessibilityScreenChange;
- (id)_elementForData:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface FramebufferConnection : NSObject
{
    BOOL _connectionEstablished;
    unsigned int _portToRegister;
    SimulatorViewController *_simulatorViewController;
    NSObject<OS_dispatch_source> *_framebufferPortSource;
    NSObject<OS_dispatch_queue> *_framebufferPortQueue;
    NSString *_nameToRegister;
}

@property(retain) NSString *nameToRegister; // @synthesize nameToRegister=_nameToRegister;
@property unsigned int portToRegister; // @synthesize portToRegister=_portToRegister;
@property NSObject<OS_dispatch_queue> *framebufferPortQueue; // @synthesize framebufferPortQueue=_framebufferPortQueue;
@property NSObject<OS_dispatch_source> *framebufferPortSource; // @synthesize framebufferPortSource=_framebufferPortSource;
@property BOOL connectionEstablished; // @synthesize connectionEstablished=_connectionEstablished;
@property SimulatorViewController *simulatorViewController; // @synthesize simulatorViewController=_simulatorViewController;
- (void)assertQueue;
- (void)handleMachMessage:(void *)arg1;
- (void)purpleSendReply:(struct purpleMessage *)arg1;
- (void)checkMachMessages:(unsigned int)arg1;
- (void)registerPorts:(id)arg1;
- (void)dealloc;
- (void)disconnect;
- (id)initWithPortName:(id)arg1 controller:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface DeviceWindow : NSWindow
{
    BOOL _touchDownInStatusBar;
    BOOL _dragStartedOnScreen;
    BOOL _dragWentOffScreen;
    BOOL _previousEventWasMouseDown;
    BOOL _allowFlagsChangedEvents;
    GuiController *_guiController;
    SimulatorView *_simulatorView;
    unsigned long long _previousModifierFlags;
    unsigned long long _previousTouchModifierFlags;
}

@property BOOL allowFlagsChangedEvents; // @synthesize allowFlagsChangedEvents=_allowFlagsChangedEvents;
@property BOOL previousEventWasMouseDown; // @synthesize previousEventWasMouseDown=_previousEventWasMouseDown;
@property BOOL dragWentOffScreen; // @synthesize dragWentOffScreen=_dragWentOffScreen;
@property BOOL dragStartedOnScreen; // @synthesize dragStartedOnScreen=_dragStartedOnScreen;
@property BOOL touchDownInStatusBar; // @synthesize touchDownInStatusBar=_touchDownInStatusBar;
@property unsigned long long previousTouchModifierFlags; // @synthesize previousTouchModifierFlags=_previousTouchModifierFlags;
@property unsigned long long previousModifierFlags; // @synthesize previousModifierFlags=_previousModifierFlags;
@property SimulatorView *simulatorView; // @synthesize simulatorView=_simulatorView;
@property GuiController *guiController; // @synthesize guiController=_guiController;
- (BOOL)performDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (struct CGPoint)translatePointFromWindowToSimulator:(struct CGPoint)arg1;
- (BOOL)touchDownInPortraitStatusBar:(struct CGPoint)arg1;
- (BOOL)dragWentOffscreen:(struct CGPoint *)arg1;
- (void)sendEvent:(id)arg1;
- (void)sendMouseOrFlagsEvent:(id)arg1;
- (void)sendKeyboardEvent:(id)arg1;
- (BOOL)canBecomeKeyWindow;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SimulatorGlassView : NSView
{
    BOOL _fingerDown;
    BOOL _acceptingDrag;
    GuiController *_guiController;
    struct CGPoint _mousePoint;
    struct CGPoint _pinchPoint;
    struct CGPoint _mirrorPoint;
}

@property GuiController *guiController; // @synthesize guiController=_guiController;
@property(nonatomic) BOOL acceptingDrag; // @synthesize acceptingDrag=_acceptingDrag;
@property(nonatomic) BOOL fingerDown; // @synthesize fingerDown=_fingerDown;
@property(nonatomic) struct CGPoint mirrorPoint; // @synthesize mirrorPoint=_mirrorPoint;
@property(nonatomic) struct CGPoint pinchPoint; // @synthesize pinchPoint=_pinchPoint;
@property(nonatomic) struct CGPoint mousePoint; // @synthesize mousePoint=_mousePoint;
- (void)drawFingerAtPoint:(struct CGPoint)arg1;
- (void)drawCenterAtPoint:(struct CGPoint)arg1;
- (void)resetMirrorPoint;
- (void)resetMousePoint;
- (void)resetPinchPoint;
- (BOOL)isIgnoredPoint:(struct CGPoint)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 controller:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SimulatorGlassWindow : NSWindow
{
}

- (BOOL)accessibilityIsIgnored;
- (BOOL)hasShadow;
- (id)backgroundColor;
- (BOOL)isOpaque;
- (BOOL)ignoresMouseEvents;

@end

__attribute__((visibility("hidden")))
@interface SimulatorView : NSOpenGLView
{
    SimulatorViewController *_simulatorViewController;
}

@property SimulatorViewController *simulatorViewController; // @synthesize simulatorViewController=_simulatorViewController;
- (BOOL)mouseDownCanMoveWindow;
- (void)drawRect:(struct CGRect)arg1;
- (void)prepareOpenGL;
- (id)initWithFrame:(struct CGRect)arg1 simulatorViewController:(id)arg2;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)superAccessibilityAttributeNames;
- (id)superAccessibilityAttributeValue:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface PreferencesController : NSObject
{
    GuiController *_guiController;
}

+ (void)registerDefaults;
+ (void)createMobileSafariBookmarks:(BOOL)arg1;
+ (void)initialize;
@property GuiController *guiController; // @synthesize guiController=_guiController;
- (void)copyDesktopSafariBookmarks:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface BootstrapController : NSObject
{
    BOOL _bootstrapRunning;
    BOOL _launchdJobsLoaded;
    unsigned int _hostSupportPort;
    unsigned int _bootstrapOwnerPort;
    unsigned int _bootstrapSubsetPort;
    unsigned int _systemAppPort;
    unsigned int _workspacePort;
    unsigned int _springBoardPort;
    ISHSDKInfo *_sdk;
    ISHDeviceInfo *_device;
    NSString *_applicationSupportDirectory;
    NSString *_bootstrapName;
    NSObject<OS_dispatch_queue> *_machServicesQueue;
    NSMutableDictionary *_machServices;
    NSObject<OS_dispatch_queue> *_bridgeQueue;
    NSDistantObject<SimulatorBridge> *_bridgeDistantObject;
    NSObject<OS_dispatch_queue> *_bootstrapQueue;
    NSObject<OS_dispatch_source> *_bootstrapSubsetBrokerSource;
}

+ (id)bootstrapControllerForSDK:(id)arg1 device:(id)arg2;
@property(nonatomic) unsigned int springBoardPort; // @synthesize springBoardPort=_springBoardPort;
@property(nonatomic) unsigned int workspacePort; // @synthesize workspacePort=_workspacePort;
@property(nonatomic) unsigned int systemAppPort; // @synthesize systemAppPort=_systemAppPort;
@property unsigned int bootstrapSubsetPort; // @synthesize bootstrapSubsetPort=_bootstrapSubsetPort;
@property NSObject<OS_dispatch_source> *bootstrapSubsetBrokerSource; // @synthesize bootstrapSubsetBrokerSource=_bootstrapSubsetBrokerSource;
@property unsigned int bootstrapOwnerPort; // @synthesize bootstrapOwnerPort=_bootstrapOwnerPort;
@property BOOL launchdJobsLoaded; // @synthesize launchdJobsLoaded=_launchdJobsLoaded;
@property BOOL bootstrapRunning; // @synthesize bootstrapRunning=_bootstrapRunning;
@property NSObject<OS_dispatch_queue> *bootstrapQueue; // @synthesize bootstrapQueue=_bootstrapQueue;
@property unsigned int hostSupportPort; // @synthesize hostSupportPort=_hostSupportPort;
@property(retain, nonatomic) NSDistantObject<SimulatorBridge> *bridgeDistantObject; // @synthesize bridgeDistantObject=_bridgeDistantObject;
@property NSObject<OS_dispatch_queue> *bridgeQueue; // @synthesize bridgeQueue=_bridgeQueue;
@property(retain) NSMutableDictionary *machServices; // @synthesize machServices=_machServices;
@property NSObject<OS_dispatch_queue> *machServicesQueue; // @synthesize machServicesQueue=_machServicesQueue;
@property(copy) NSString *bootstrapName; // @synthesize bootstrapName=_bootstrapName;
@property(copy, nonatomic) NSString *applicationSupportDirectory; // @synthesize applicationSupportDirectory=_applicationSupportDirectory;
@property(retain) ISHDeviceInfo *device; // @synthesize device=_device;
@property(retain) ISHSDKInfo *sdk; // @synthesize sdk=_sdk;
- (unsigned int)frontmostAppPort;
- (unsigned int)_lookupService:(id)arg1;
- (unsigned int)lookupService:(id)arg1;
- (void)registerPortsWithLaunchd;
- (void)registerService:(id)arg1 asService:(id)arg2 withReply:(CDUnknownBlockType)arg3 onQueue:(id)arg4;
- (void)registerPort:(unsigned int)arg1 asService:(id)arg2 withReply:(CDUnknownBlockType)arg3 onQueue:(id)arg4;
- (void)clearTempPaths;
- (void)ensureHomeSkel;
- (void)updateSimulatorKeymap:(id)arg1;
- (void)terminate;
- (void)launch:(CDUnknownBlockType)arg1;
- (void)brokerBootstrapSubsetOnPort:(unsigned int)arg1;
- (unsigned int)bootstrap;
- (void)destroyBootstrap;
- (void)bootstrapSimulatorSession;
- (id)getLaunchDaemonsPaths;
- (void)createBootstrap;
- (void)unloadLaunchdJobs;
- (void)fixPermissionsForLaunchdPlist:(id)arg1;
- (void)loadLaunchdJobsLegacy;
- (void)loadLaunchdJobs;
- (id)createEnvironment;
- (id)capabilitiesPlistForCurrentDevice;
- (void)cleanupDispatchMemoryFile;
- (void)sendDispatchMemoryWarning;
- (id)memoryWarningFilePath;
- (void)launchApplicationAsync:(id)arg1 arguments:(id)arg2 environment:(id)arg3 standardOutPath:(id)arg4 standardErrorPath:(id)arg5 options:(id)arg6 reply:(CDUnknownBlockType)arg7 queue:(id)arg8 timeout:(double)arg9;
- (void)simulatorBridgeSync:(CDUnknownBlockType)arg1;
- (void)simulatorBridgeAsync:(CDUnknownBlockType)arg1;
- (void)simulatorBridgeCommon:(CDUnknownBlockType)arg1;
- (id)simulatedHomeDirectory;
- (id)logDirectory;
- (id)simulatedHomeDirectoryVersioned:(BOOL)arg1;
- (id)versionedSubdirectory;
- (id)simulatorRuntimeDirectory;
- (void)clearMobileInstallationCache;
- (void)copyGlobalPreferencesPlist;
- (void)installSampleContentIfNecessary;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SimulatorChromeView : NSView
{
    BOOL _shadowNeedsDisplay;
    NSImage *_frameImage;
}

@property BOOL shadowNeedsDisplay; // @synthesize shadowNeedsDisplay=_shadowNeedsDisplay;
@property(retain) NSImage *frameImage; // @synthesize frameImage=_frameImage;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)isOpaque;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 image:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SimulatorHomeView : NSView
{
    BOOL _pressed;
    BOOL _useDoubled;
    NSImage *_image;
}

@property BOOL useDoubled; // @synthesize useDoubled=_useDoubled;
@property BOOL pressed; // @synthesize pressed=_pressed;
@property(retain) NSImage *image; // @synthesize image=_image;
- (void)drawRect:(struct CGRect)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)isOpaque;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;

@end

__attribute__((visibility("hidden")))
@interface LaunchdUtilities : NSObject
{
}

+ (id)allJobLabels;
+ (void)deleteJobWithLabel:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface IndigoSessionController : NSObject
{
    BOOL _sessionLive;
    BOOL _usingDashcode;
    BOOL _usingDashcodeFullScreen;
    BOOL _usingInterfaceBuilder;
    int _grandchildPid;
    unsigned int _brokerPort;
    BootstrapController *_bootstrapController;
    NSObject<OS_dispatch_queue> *_sessionQueue;
    GuiController *_guiController;
    NSString *_sessionUUID;
    NSString *_sessionOwner;
    NSString *_sessionApplicationIdentifier;
    NSObject<OS_dispatch_queue> *_machServicesQueue;
    NSMutableDictionary *_machServices;
}

+ (id)indigoSessionControllerForGuiController:(id)arg1;
@property unsigned int brokerPort; // @synthesize brokerPort=_brokerPort;
@property(retain) NSMutableDictionary *machServices; // @synthesize machServices=_machServices;
@property NSObject<OS_dispatch_queue> *machServicesQueue; // @synthesize machServicesQueue=_machServicesQueue;
@property BOOL usingInterfaceBuilder; // @synthesize usingInterfaceBuilder=_usingInterfaceBuilder;
@property BOOL usingDashcodeFullScreen; // @synthesize usingDashcodeFullScreen=_usingDashcodeFullScreen;
@property BOOL usingDashcode; // @synthesize usingDashcode=_usingDashcode;
@property int grandchildPid; // @synthesize grandchildPid=_grandchildPid;
@property(copy) NSString *sessionApplicationIdentifier; // @synthesize sessionApplicationIdentifier=_sessionApplicationIdentifier;
@property(copy) NSString *sessionOwner; // @synthesize sessionOwner=_sessionOwner;
@property(copy) NSString *sessionUUID; // @synthesize sessionUUID=_sessionUUID;
@property BOOL sessionLive; // @synthesize sessionLive=_sessionLive;
@property GuiController *guiController; // @synthesize guiController=_guiController;
@property NSObject<OS_dispatch_queue> *sessionQueue; // @synthesize sessionQueue=_sessionQueue;
@property(retain) BootstrapController *bootstrapController; // @synthesize bootstrapController=_bootstrapController;
- (void)registerPort:(unsigned int)arg1 service:(id)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (id)_typeForInstalledApplication:(id)arg1;
- (BOOL)_isUserApplicationInstalled:(id)arg1;
- (void)_uninstallApplication:(id)arg1;
- (BOOL)_installApplication:(id)arg1 withPath:(id)arg2;
- (void)_postLaunchedMessageWithUserInfo:(id)arg1;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2 reason:(id)arg3;
- (void)watchGrandchildProcess;
- (id)_setConfigurationSDK:(id)arg1 device:(id)arg2;
- (void)setConfigurationSDK:(id)arg1 device:(id)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)delayedKill:(id)arg1;
- (void)simulateLocation:(id)arg1;
- (void)requestCloudSync:(id)arg1;
- (void)backgroundAllApps:(id)arg1;
- (void)sendApplicationEvent:(id)arg1;
- (void)endSession:(id)arg1;
- (void)startSession:(id)arg1;
- (void)resetContentAndSettings;
- (void)_launch;
- (void)launch;
- (void)_terminateBecause:(id)arg1;
- (void)terminateBecause:(id)arg1;
- (void)_issueOperationResult:(id)arg1 result:(int)arg2;
- (void)sendReady;
- (void)dealloc;
- (id)initForGuiController:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface MockiPhoneAccessibilityElement : NSObject
{
    NSDictionary *_data;
}

+ (void)initialize;
@property(copy) NSDictionary *data; // @synthesize data=_data;
- (void)dealloc;
- (BOOL)accessibilityShouldUseUniqueId;
- (void)accessibilityPerformAction:(id)arg1;
- (void)performDecrementAction;
- (void)performIncrementAction;
- (void)performPressAction;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)roleDescription;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (int)pid;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (void)updateDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GLProgram : NSObject
{
    unsigned int _program;
    int _texture;
    int _normalMatrix;
    int _modelviewMatrix;
    int _modelviewProjectionMatrix;
    int _materialColor;
    int _lightSpecularExp;
    int _lightSpecularScale;
    int _lightSpecularExpDetail;
    int _lightSpecularScaleDetail;
    unsigned int _vertexShader;
    unsigned int _fragmentShader;
}

+ (id)currentProgram;
@property unsigned int fragmentShader; // @synthesize fragmentShader=_fragmentShader;
@property unsigned int vertexShader; // @synthesize vertexShader=_vertexShader;
@property int lightSpecularScaleDetail; // @synthesize lightSpecularScaleDetail=_lightSpecularScaleDetail;
@property int lightSpecularExpDetail; // @synthesize lightSpecularExpDetail=_lightSpecularExpDetail;
@property int lightSpecularScale; // @synthesize lightSpecularScale=_lightSpecularScale;
@property int lightSpecularExp; // @synthesize lightSpecularExp=_lightSpecularExp;
@property int materialColor; // @synthesize materialColor=_materialColor;
@property int modelviewProjectionMatrix; // @synthesize modelviewProjectionMatrix=_modelviewProjectionMatrix;
@property int modelviewMatrix; // @synthesize modelviewMatrix=_modelviewMatrix;
@property int normalMatrix; // @synthesize normalMatrix=_normalMatrix;
@property int texture; // @synthesize texture=_texture;
@property unsigned int program; // @synthesize program=_program;
- (id)initWithVertexShader:(id)arg1 fragmentShader:(id)arg2;
- (unsigned int)compileShader:(id)arg1 type:(unsigned int)arg2;
- (void)makeCurrentProgram;

@end

@interface NSTask (SimulatorRunLoop)
- (void)waitUntilExitWithoutSpinningRunLoop;
@end

